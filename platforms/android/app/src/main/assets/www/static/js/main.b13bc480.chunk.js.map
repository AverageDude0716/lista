{"version":3,"sources":["App.js","index.js"],"names":["spreadsheetID","accessToken","App","_useState","useState","_useState2","Object","slicedToArray","name","setName","_useState3","_useState4","guild","setGuild","_useState5","_useState6","section","setSection","_useState7","_useState8","currentCamera","setCurrentCamera","lastResult","useEffect","html5QrCode","Html5Qrcode","stop","_unused","console","log","start","facingMode","fps","qrbox","text","result","parsed","qrcodeContent","splitted","split","parseResult","timeIn","Date","toLocaleTimeString","fetch","concat","method","headers","Content-Type","Authorization","body","JSON","stringify","requests","appendCells","rows","values","userEnteredValue","stringValue","fields","updateAttendance","errorMessage","catch","err","react_default","a","createElement","id","onClick","align","deleteDuplicates","range","sheetId","comparisonColumns","dimension","startIndex","endIndex","startApp","ReactDOM","createRoot","document","getElementById","render","src_App","window","cordova","addEventListener"],"mappings":"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","file":"static/js/main.b13bc480.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Html5Qrcode } from \"html5-qrcode\";\n\nconst spreadsheetID = \"1BEdgdwItam2jOA9MGEhtexD3MqK21Y0mMxxBebvooO4\";\n// The access token changes every few minutes\nconst accessToken = \"ya29.a0AeTM1if7KzDwxkodcXkIHHwcU96mZwbLDC3ZRE36d6hqX2jq_uLKPaBYz4IMherExTCglSHJ8N4-07_bhDDhbkRu8dCCLrL-_n7hnktXrtz0wRfjparYz3LjhQUQLZeDfTmPsC9H_pKudIxYoHZOXZtnqROzaCgYKAaUSARISFQHWtWOmO4XDENeIut4WnsP_X4F96g0163\";\n\n// Our main component\nconst App = () => {\n    // Name, guild, and section states that updates everytime QR Code is scanned\n    let [name, setName] = useState(\"\");\n    let [guild, setGuild] = useState(\"\");\n    let [section, setSection] = useState(\"\");\n\n    let [currentCamera, setCurrentCamera] = useState(\"environment\");\n\n    // Separate name, guild, and section and return it as different variables\n    let parseResult = (qrcodeContent) => {\n        let splitted = qrcodeContent.split(\" [|] \");  // QR Code content example: Dela Cruz, Juan A. [|] IREDOC [|] STEM1201\n        return {\n            name: splitted[0],\n            guild: splitted[1],\n            section: splitted[2]\n        }\n    }\n\n    let updateAttendance = (name, guild, section, timeIn) => {\n        fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetID}:batchUpdate`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                //update this token with yours.\n                Authorization: `Bearer ${accessToken}`,\n            },\n\n            body: JSON.stringify({\n                \"requests\": [{\n                    \"appendCells\": {\n                        \"rows\": [{\n                            \"values\": [\n                                {\n                                    // NAME\n                                    \"userEnteredValue\": {\n                                        \"stringValue\": name\n                                    }\n                                },\n                                {\n                                    // GUILD\n                                    \"userEnteredValue\": {\n                                        \"stringValue\": guild\n                                    }\n                                },\n                                {\n                                    // SECTION\n                                    \"userEnteredValue\": {\n                                        \"stringValue\": section\n                                    }\n                                },\n                                {\n                                    // TIME IN\n                                    \"userEnteredValue\": {\n                                        \"stringValue\": timeIn\n                                    }\n                                },\n                            ]\n                        }],\n                        \"fields\": \"*\"\n                    },\n                }]\n            })\n        })\n    }\n\n    let removeDuplicate = () => {\n        fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetID}:batchUpdate`, {\n            method: \"POST\", headers: {\"Content-Type\": \"application/json\", Authorization: `Bearer ${accessToken}`,},body: JSON.stringify({\"requests\": [{\"deleteDuplicates\": {\"range\": {\"sheetId\": 0 },\"comparisonColumns\": [ {\"dimension\": \"COLUMNS\",\"startIndex\": 0,\"endIndex\": 1}]}}] })\n        });\n    }\n\n    // Variable to compare the last result to the recent QR code\n    let lastResult = \"\";\n\n    // useEffect() means if this component is rendered (shown to the user)\n    useEffect(() => {\n        const html5QrCode = new Html5Qrcode(\"reader\");  // Use the div with id 'reader' as our QR Code Reader\n        const config = { fps: 10, qrbox: 250};  //  QR Code Reader configurations\n\n        try {\n            html5QrCode.stop();\n        } catch {\n            // :)\n        }\n\n        console.log(currentCamera)\n\n        // Start reader using back camera\n        html5QrCode.start({ facingMode: currentCamera }, config,\n        (text, result) => {\n            // Parse QR Code content and update our states\n            let parsed = parseResult(text);\n\n            setName(parsed.name);\n            setGuild(parsed.guild);\n            setSection(parsed.section);\n\n            //This conditions stops the application from updating the spreadsheet when showing the same QR code\n            if (text !== lastResult) {\n            lastResult = text;\n            let timeIn = new Date().toLocaleTimeString();\n                updateAttendance(parsed.name, parsed.guild, parsed.section, timeIn);\n            }\n        },\n        (errorMessage) => {\n            // If scan has error, this block will execute\n            console.log(errorMessage);\n        }).catch((err) => {\n            // This block will execute if the app has trouble starting the camera\n            console.log(err);\n        });\n    }, [currentCamera]);\n\n    let changeCamera = (camera) => {\n        if(camera === \"environment\") {\n            setCurrentCamera(\"user\");\n        } else {\n            setCurrentCamera(\"environment\");\n        }\n    }\n\n    // Render all visible parts of our app, place all (HTML) contents here\n    return (\n        <div>\n            {/* The topbar. We can add menu buttons and/or settings button here */}\n            <div id=\"topbar\">\n                Lista\n            </div>\n\n            {/* The camera. We don't need to touch this */}\n            <div id=\"reader\" onClick={ () => changeCamera(currentCamera) }></div>\n\n            {/* Display QR Code content. This is a temporary proof of concept\n                QR Code content should be synced to google sheets */}\n            <div align=\"center\">\n                <p id=\"name\">{ name }</p>\n                <p id=\"guild\">{ guild }</p>\n                <p id=\"section\">{ section }</p>\n            </div>\n             {/* Temporary button for removing duplicates in spreadsheet*/}\n            <button onClick={removeDuplicate}>Remove Duplicate</button>\n        </div>\n    )\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n// Don't make any changes here! This script just initializes our main component and starts it\n\nconst startApp = () => {\n\tconst root = ReactDOM.createRoot(document.getElementById('root'));\n\troot.render(<App />);\n};\n\n// Check if this is on Cordova Application then add an event listener for device ready first\n// Else just start the app\nif(window.cordova) {\n\tdocument.addEventListener('deviceready', startApp, false);\n} else {\n\tstartApp();\n}\n"],"sourceRoot":""}