{"version":3,"sources":["App.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","name","setName","_useState3","_useState4","studentNumber","setStudentNumber","_useState5","_useState6","guild","setGuild","_useState7","_useState8","section","setSection","lastResult","useEffect","Html5Qrcode","start","facingMode","fps","qrbox","text","result","parsed","qrcodeContent","splitted","split","parseResult","timeIn","Date","toLocaleTimeString","fetch","concat","method","headers","Content-Type","Authorization","body","JSON","stringify","requests","appendCells","rows","values","userEnteredValue","stringValue","fields","updateAttendance","errorMessage","console","log","catch","err","react_default","a","createElement","react_onsenui","side","width","isSwipeable","collapse","renderToolbar","id","className","icon","align","startApp","ReactDOM","createRoot","document","getElementById","render","src_App","window","cordova","addEventListener"],"mappings":"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","file":"static/js/main.839ade58.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Html5Qrcode } from \"html5-qrcode\";\n\nimport * as Ons from 'react-onsenui';\nimport 'onsenui/css/onsenui.css';\nimport 'onsenui/css/onsen-css-components.css';\n\nconst spreadsheetID = \"1BEdgdwItam2jOA9MGEhtexD3MqK21Y0mMxxBebvooO4\";\n// The access token changes every few minutes\nconst accessToken = \"TOKEN\";\n\n// Our main component\nconst App = () => {\n    // Name, guild, and section states that updates everytime QR Code is scanned\n    let [name, setName] = useState(\"\");\n    let [studentNumber, setStudentNumber] = useState(\"\");\n    let [guild, setGuild] = useState(\"\");\n    let [section, setSection] = useState(\"\");\n\n    // Separate name, guild, and section and return it as different variables\n    let parseResult = (qrcodeContent) => {\n        let splitted = qrcodeContent.split(\" [|] \");  // QR Code content example: Dela Cruz, Juan A. [|] IREDOC [|] STEM1201\n        return {\n            name: splitted[0],\n            studentNumber: splitted[1],\n            guild: splitted[2],\n            section: splitted[3]\n        }\n    }\n\n    let updateAttendance = (name, guild, section, timeIn) => {\n        fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetID}:batchUpdate`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                //update this token with yours.\n                Authorization: `Bearer ${accessToken}`,\n            },\n\n            body: JSON.stringify({\n                \"requests\": [{\n                    \"appendCells\": {\n                        \"rows\": [{\n                            \"values\": [\n                                {\n                                    // NAME\n                                    \"userEnteredValue\": {\n                                        \"stringValue\": name\n                                    }\n                                },\n                                {\n                                    // GUILD\n                                    \"userEnteredValue\": {\n                                        \"stringValue\": guild\n                                    }\n                                },\n                                {\n                                    // SECTION\n                                    \"userEnteredValue\": {\n                                        \"stringValue\": section\n                                    }\n                                },\n                                {\n                                    // TIME IN\n                                    \"userEnteredValue\": {\n                                        \"stringValue\": timeIn\n                                    }\n                                },\n                            ]\n                        }],\n                        \"fields\": \"*\"\n                    },\n                }]\n            })\n        })\n    }\n\n    // Variable to compare the last result to the recent QR code\n    let lastResult = \"\";\n\n    // useEffect() means if this component is rendered (shown to the user)\n    useEffect(() => {\n        const html5QrCode = new Html5Qrcode(\"reader\");  // Use the div with id 'reader' as our QR Code Reader\n        const config = { fps: 10, qrbox: 150};  //  QR Code Reader configurations\n\n        // Start reader using back camera\n        html5QrCode.start({ facingMode: \"environment\" }, config,\n        (text, result) => {\n            // Parse QR Code content and update our states\n            let parsed = parseResult(text);\n\n            setName(parsed.name);\n            setStudentNumber(parsed.studentNumber);\n            setGuild(parsed.guild);\n            setSection(parsed.section);\n\n            //This conditions stops the application from updating the spreadsheet when showing the same QR code\n            if (text !== lastResult) {\n            lastResult = text;\n            let timeIn = new Date().toLocaleTimeString();\n                updateAttendance(parsed.name, parsed.guild, parsed.section, timeIn);\n            }\n        },\n        (errorMessage) => {\n            // If scan has error, this block will execute\n            console.log(errorMessage);\n        }).catch((err) => {\n            // This block will execute if the app has trouble starting the camera\n            console.log(err);\n        });\n    }, []);\n\n    // Render all visible parts of our app, place all (HTML) contents here\n    return (\n        <Ons.Page>\n\n            <Ons.Splitter>\n                <Ons.SplitterSide\n                    side=\"left\"\n                    width={ \"300\" }\n                    isSwipeable={ true }\n                    collapse={ true }>\n\n                    <Ons.Page> Page Left </Ons.Page>\n                </Ons.SplitterSide>\n\n                <Ons.SplitterContent>\n                    <Ons.Page renderToolbar={() =>\n                        <Ons.Toolbar id=\"toolbar\">\n                            <div className=\"left\">\n                                <div className=\"sidebyside\">\n                                    <Ons.Icon icon=\"md-menu\"></Ons.Icon>\n                                    <span id=\"toolbar-title\">Lista</span>\n                                </div>\n                            </div>\n                        </Ons.Toolbar>}>\n\n                        <br /><br />\n\n                        <div id=\"reader\"></div>\n\n                        <br /><br /><hr />\n\n                        {/* Display QR Code content. This is a temporary proof of concept\n                            QR Code content should be synced to google sheets */}\n                        <div align=\"center\">\n                            <h2>Student Information</h2>\n\n                            <div id=\"student-information\">\n                                <p id=\"name\">Name: { name }</p>\n                                <p id=\"student-number\">Student number: { studentNumber }</p>\n                                <p id=\"guild\">Guild: { guild }</p>\n                                <p id=\"section\">Section: { section }</p>\n                            </div>\n                        </div>\n                    </Ons.Page>\n                </Ons.SplitterContent>\n            </Ons.Splitter>\n        </Ons.Page>\n    )\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nimport 'onsenui/css/onsenui.css';\nimport 'onsenui/css/onsen-css-components.css';\n\n// Don't make any changes here! This script just initializes our main component and starts it\n\nconst startApp = () => {\n\tconst root = ReactDOM.createRoot(document.getElementById('root'));\n\troot.render(<App />);\n};\n\n// Check if this is on Cordova Application then add an event listener for device ready first\n// Else just start the app\nif(window.cordova) {\n\tdocument.addEventListener('deviceready', startApp, false);\n} else {\n\tstartApp();\n}\n"],"sourceRoot":""}